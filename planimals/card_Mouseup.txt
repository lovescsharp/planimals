private void card_Mouseup(object sender, MouseEventArgs e)
{
    int row = 0;
    int col = 0;
    Console.WriteLine($"-dropped {this.common_name} at {this.Location}");
    foreach (List<Card> subchain in MainForm.playerChain)
    {
        Console.WriteLine($"-checking whether {this.common_name} is from the chain or from the deck...");
        foreach (Card c in subchain)
        {
            if (this == c)
            {
                Console.WriteLine($" yep this {this.common_name} is from the playerChain[{MainForm.playerChain.IndexOf(subchain)}][{subchain.IndexOf(c)}]");
                Console.WriteLine($"there are {MainForm.locationIndicators.Count} rows in locationIndicators");
                for (int i = 0; i < MainForm.locationIndicators.Count; i++)
                {
                    for (int j = 0; j < MainForm.locationIndicators[i].Count; j++)
                    {
                        if (MainForm.locationIndicators[i][j].Contains(FindForm().PointToClient(Cursor.Position))) //the card was just put somewhere else in the chain
                        {
                            Console.WriteLine($"this {this.common_name} was moved to {MainForm.locationIndicators[i][j]}");
                            if (cellIsBusy(i, j))
                            {
                                Console.WriteLine("Mvoing cards by one.");
                                foreach (Card card in MainForm.playerChain[i])
                                {
                                    card.Location = new Point(c.Location.X + c.Width + 5, c.Location.Y);
                                    if (card == c) break;
                                }
                            }
                            row = i;
                            col = j;
                            try
                            {
                                MainForm.playerChain[i][j] = this;
                            }
                            catch
                            {
                                Drop(this);
                                Location = MainForm.locationIndicators[i][j].Location;
                                return;
                            }
                            MainForm.playerChain[MainForm.playerChain.IndexOf(subchain)].RemoveAt(subchain.IndexOf(c));
                            if (MainForm.username != "")
                            {
                                using (SqlConnection sqlConnection = new SqlConnection(MainForm.connectionString))
                                {
                                    sqlConnection.Open();
                                    SqlCommand update = new SqlCommand(
                                        $"UPDATE FoodChainCards " +
                                        $"SET RowNo={i}, PositionNo={j} " +
                                        $"WHERE Username='{MainForm.username}' " +
                                        $"AND RowNo={MainForm.playerChain.IndexOf(subchain)} " +
                                        $"AND PositionNo={subchain.IndexOf(c)}"
                                        , sqlConnection);
                                    update.ExecuteNonQuery();
                                    sqlConnection.Close();
                                }
                            }
                            MainForm.locationIndicators[i].Add(
                                new Rectangle(
                                    MainForm.locationIndicators[i][j].X + MainForm.locationIndicators[i][j].Width + 5,
                                    MainForm.locationIndicators[i][j].Y,
                                    MainForm.workingHeight / 8 + 10,
                                    MainForm.workingWidth / 10 + 10
                                )
                            );
                            if (MainForm.locationIndicators[0].Count == 1)
                            {
                                MainForm.locationIndicators.Add(new List<Rectangle>());
                                MainForm.locationIndicators[1].Add(
                                    new Rectangle
                                    (
                                        10,
                                        MainForm.fieldRectangle.Top + 10 + MainForm.locationIndicators[0][0].Height + 10,
                                        MainForm.workingHeight / 8 + 10,
                                        MainForm.workingWidth / 10 + 10
                                        )                                   
                                    );
                            }
                            FindForm().Invalidate();
                            Drop(this);
                            Location = MainForm.locationIndicators[i][j].Location;
                            return;
                        }
                    }
                }
                //the card was removed from the chain
                putToHand(row, col);
                return;
            }
        }
    }
    Console.WriteLine(" nope, this is from the hand");
    for (int i = 0; i < MainForm.locationIndicators.Count; i++)
    {
        for (int j = 0; j < MainForm.locationIndicators[i].Count; j++)
        {
            if (MainForm.locationIndicators[i][j].Contains(FindForm().PointToClient(Cursor.Position))) //the card was put into the chain
            {
                if (cellIsBusy(i, j))
                {
                    foreach (Card c in MainForm.playerChain[i])
                    {
                        c.Location = new Point(c.Location.X + c.Width + 5, c.Location.Y);
                    }
                }
                row = i;
                col = j;
                putToChain(row, col);
                MainForm.locationIndicators[i].Add(
                    new Rectangle(
                        MainForm.locationIndicators[i][j].X + MainForm.locationIndicators[i][j].Width + 5,
                        MainForm.locationIndicators[i][j].Y,
                        MainForm.workingHeight / 8 + 10,
                        MainForm.workingWidth / 10 + 10
                    )
                );
                Drop(this);
                return;
            }
        }
    }
    Drop(this);
    Location = prevLocation;
}